#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  dallas-1-wire-monitoring-enhanced-sepCF
#  
#  Copyright 2016  <pi@raspberrypi>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

######################

# Basic code to read from a Dallas 1-wire temperature probe with Python.
# Original code obtained from - https://www.modmypi.com/blog/ds18b20-one-wire-digital-temperature-sensor-and-the-raspberry-pi

# Import required modules;

import os 					# 'os' allows us to enable our 1-Wire drivers and interface with the sensor.
import time				# 'time' allows our Raspberry Pi to define time, and enables the use of time periods in the code.
import RPi.GPIO as GPIO 	# 'RPi.GPIO' allows us to use the GPIO pins on the Raspberry Pi for the moisture sensor.
from Adafruit_IO import *	# 'Adafruit_IO' allows us to use the cloud based Adafruit dashboard system.

# GPIO setup

GPIO.setmode(GPIO.BCM)								# Set our GPIO numbering mode to BCM.
digital_moisture_sensor_pin = 17					# Set the GPIO pin that the digital moisture sensor is connected to.
led_pin = 27										# Set the GPIO pin that the testing LED is connected to.
GPIO.setup(digital_moisture_sensor_pin, GPIO.IN) 	# Set the GPIO pin to be an input.
GPIO.setup(led_pin, GPIO.OUT)						# Set the GPIO pin to be an output.

##############################################
# This section to be used for handling a simple config file. # Handle a simple configuration file:
# Uncomment to make live.
# ***CURRENTLY NOT USED - KEEP COMMENTED UNTIL READY***
# Handle a simple configuration file:
# config = ConfigParser.RawConfigParser()
# config.read('chilli-pi.cfg')
# chilli_pin = config.getint('sensors', 'name1_pin')
# pir_pin = config.getint('sensors', 'name2_pin')
##############################################

# Load drivers

os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

# Adding ANSI escape codes to provide colour coding of data in the console.
# Source - # https://computers.tutsplus.com/tutorials/build-a-raspberry-pi-moisture-sensor-to-monitor-your-plants--mac-52875

# All ANSI escape codes start with '\x1b[' followed by the particular instruction code.

PREVIOUS_1_LINE = "\x1b[1F"	# nF = Moves cursor to beginning of the line 'n' lines up.
PREVIOUS_2_LINE = "\x1b[2F"	# nF = Moves cursor to beginning of the line 'n' lines up.
PREVIOUS_3_LINE = "\x1b[3F"	# nF = Moves cursor to beginning of the line 'n' lines up.
RED_BACK = "\x1b[41;37m"	# Set background colour.
GREEN_BACK = "\x1b[42;30m"	# Set background colour.
YELLOW_BACK = "\x1b[43;30m"	# Set background colour.
RESET = "\x1b[0m"			# Set SGR (select graphic rendition) to '0m' (reset/normal)
NEXT_LINE = "\x1b[0E"		# nE = Moves cursor to beginning of the line 'n' lines down.
HIDE_CURSOR = "\x1b[?25l"	# Hide the cursor.

# Define the sensor's output file (w1_slave file) by it's serial number

temp_sensor = "/sys/bus/w1/devices/28-8000001ec9c7/w1_slave"

# Define a variable for the raw temperature reading. Open file, read, record and then close the temperature file.
# Use the return function to recall this data at a later stage in the code

def temp_raw():

	f = open(temp_sensor, 'r')
	lines = f.readlines()
	f.close()
	return lines

# Check the variable from the previous function for any errors.
# Line0 in the file is for error checking (crc = cyclic redundancy check), Line1 in the file is the temperature 't'.
# Strip the line0 except for the last three digits, and check for the “YES” signal which is a successful sensor reading.
# In Python, not-equal is defined as “!=”, while the reading does not equal YES, sleep for 0.2s and repeat.

def read_temp():

	lines = temp_raw()
	while lines[0].strip()[-3:] != 'YES':
		time.sleep(0.2)
		lines = temp_raw()
	   
# Once the YES signal has been received, we proceed to line1. 
# Check it for errors, strip the output of the “t=” phrase to leave just the temperature numbers.

	temp_output = lines[1].find('t=')

# Then run two calculations to give us the figures in Celsius and Fahrenheit.

	if temp_output != -1:
		temp_string = lines[1].strip()[temp_output+2:]
		temp_c = float(temp_string) / 1000.0
		temp_f = temp_c * 9.0 / 5.0 + 32.0
		return temp_c, temp_f

# This is the callback function for the digital output signal from the moisture sensor.
# This function will be called every time there is a change on the specified GPIO pin.

def callback(digital_moisture_sensor_pin):  
	if GPIO.input(digital_moisture_sensor_pin):
		DSMS = 0#print message # PCB LED off, soil is dry.
		#sendEmail(message_dead) #Currently not used.
	else:
		DSMS = 1#print message # PCB LED on, soil is wet.
		#sendEmail(message_alive) #Currently not used.

# Watch the digital soil moisture pin and declare when the pin goes HIGH or LOW.
GPIO.add_event_detect(digital_moisture_sensor_pin, GPIO.BOTH, bouncetime=300)

# Assign a function to the digital soil moisture pin, so that when the previous line tells us there is a change on the pin, run this function.
GPIO.add_event_callback(digital_moisture_sensor_pin, callback)

# Clear the screen and put the cursor at the top.

print '\x1b[2J\x1b[H'
print 'CHILLI-PI MONITORING SYSTEM'
print '===========================\n'

# Loop the process and output the temperature data every 1 second.
# {:>10} is used to align right.
# {:.2f} is used for decimal precision

while True:
	temp_deg_c, temp_deg_f = read_temp()
	if temp_deg_c < 10:
		temp_colour_background = RED_BACK
	elif temp_deg_c < 15:
		temp_colour_background = YELLOW_BACK
	else:
		temp_colour_background = GREEN_BACK
		
	if GPIO.input(digital_moisture_sensor_pin):
		GPIO.output(led_pin, True)
		dig_soil_moisture_background = RED_BACK
	else:
		GPIO.output(led_pin, False)
		dig_soil_moisture_background = GREEN_BACK
		
	print temp_colour_background + "Soil Temp Deg.C: {:.1f}".format(temp_deg_c)
	print temp_colour_background + "Soil Temp Deg.F: {:.1f}".format(temp_deg_f)
	print dig_soil_moisture_background + "Digital Soil Moisture" + PREVIOUS_3_LINE + RESET + HIDE_CURSOR
	time.sleep(1)
