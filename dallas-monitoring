# -*- coding: utf-8 -*-

# Basic code to read from a Dallas 1-wire temperature probe with Python.
# Original code obtained from -
https://www.modmypi.com/blog/ds18b20-one-wire-digital-temperature-sensor-and-the-raspberry-pi

# Import required modules;
# 'os' allows us to enable our 1-Wire drivers and interface with the sensor
# 'time' allows our Raspberry Pi to define time, and enables the use
of time periods in the code

import os
import time

# Load drivers

os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

# Adding ANSI escape codes to provide colour coding of data in the console.
# Source - # https://computers.tutsplus.com/tutorials/build-a-raspberry-pi-moisture-sensor-to-monitor-your-plants--mac-52875

PREVIOUS_LINE="\x1b[1F"
RED_BACK="\x1b[41;37m"
GREEN_BACK="\x1b[42;30m"
YELLOW_BACK="\x1b[43;30m"
RESET="\x1b[0m"

# Define the sensor's output file (w1_slave file) by it's serial number

temp_sensor = "/sys/bus/w1/devices/28-8000001ec9c7/w1_slave"

# Define a variable for the raw temperature reading. Open file, read,
record and then close the temperature file.
# Use the return function to recall this data at a later stage in the code

def temp_raw():

        f = open(temp_sensor, 'r')
        lines = f.readlines()
        f.close()
        return lines

# Check the variable from the previous function for any errors.
# Line0 in the file is for error checking (crc = cyclic redundancy
check), Line1 in the file is the temperature 't'.
# Strip the line0 except for the last three digits, and check for the
“YES” signal which is a successful sensor reading.
# In Python, not-equal is defined as “!=”, while the reading does not
equal YES, sleep for 0.2s and repeat.

def read_temp():

        lines = temp_raw()
        while lines[0].strip()[-3:] != 'YES':
                time.sleep(0.2)
                lines = temp_raw()

# Once the YES signal has been received, we proceed to line1.
# Check it for errors, strip the output of the “t=” phrase to leave
just the temperature numbers.

        temp_output = lines[1].find('t=')

# Then run two calculations to give us the figures in Celsius and Fahrenheit.

        if temp_output != -1:
                temp_string = lines[1].strip()[temp_output+2:]
                temp_c = float(temp_string) / 1000.0
                temp_f = temp_c * 9.0 / 5.0 + 32.0
                return temp_c, temp_f

# Clear the screen and put the cursor at the top.

print '\x1b[2J\x1b[H'
print 'Soil Temperature Sensor'
print '=======================\n'

# Finally loop the process and output the temperature data every 1 second.

while True:
        final_temp = read_temp()
        if final_temp < 10:
                background = RED_BACK
        elif final_temp < 25:
                background = YELLOW_BACK
        else:
                background = GREEN_BACK
        print PREVIOUS_LINE + background + "Temp Deg.C/F: {:>5}
".format(final_temp) + RESET
        time.sleep(1)
